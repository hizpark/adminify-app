name: CI/CD Pipeline

on:
  push:
    branches:
      - main # 触发主分支代码推送
    tags:
      - 'v*' # 触发版本 tag 推送
  pull_request:
    branches:
      - main # 触发 pull request 合并到 main 分支

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run lint checks
        run: npm run lint

      - name: Run Jest tests
        run: npm run test:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # 如果您已设置全局令牌，可以省略此行
          files: ./coverage/lcov.info # 这指向 Jest 生成的覆盖率文件
          flags: unittests
          name: codecov-coverage-report
          fail_ci_if_error: true # 如果上传错误，CI 将失败

  release:
    runs-on: ubuntu-latest
    needs: test # 确保在发布之前先运行测试

    if: startsWith(github.ref, 'refs/tags/v') # 仅当 push 是 tag 时才触发发布

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # 需要获取所有历史记录以便创建版本 tag

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run tests (optional)
        run: npm run test:ci

      - name: Build project
        run: npm run build

      - name: Run release-it to create a new release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub token
        run: |
          npx release-it --ci --verbose

      - name: Upload release assets
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: release-assets
          path: |
            dist/*.zip
            dist/*.tar.gz
            CHANGELOG.md
